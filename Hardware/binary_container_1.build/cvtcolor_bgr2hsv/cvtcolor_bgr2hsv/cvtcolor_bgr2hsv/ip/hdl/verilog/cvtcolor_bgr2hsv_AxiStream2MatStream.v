// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cvtcolor_bgr2hsv_AxiStream2MatStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ldata1_dout,
        ldata1_empty_n,
        ldata1_read,
        imgInput0_413_din,
        imgInput0_413_full_n,
        imgInput0_413_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_bound_per_npc_dout,
        cols_bound_per_npc_empty_n,
        cols_bound_per_npc_read,
        last_blk_width_dout,
        last_blk_width_empty_n,
        last_blk_width_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] ldata1_dout;
input   ldata1_empty_n;
output   ldata1_read;
output  [23:0] imgInput0_413_din;
input   imgInput0_413_full_n;
output   imgInput0_413_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_bound_per_npc_dout;
input   cols_bound_per_npc_empty_n;
output   cols_bound_per_npc_read;
input  [3:0] last_blk_width_dout;
input   last_blk_width_empty_n;
output   last_blk_width_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ldata1_read;
reg imgInput0_413_write;
reg rows_read;
reg cols_bound_per_npc_read;
reg last_blk_width_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ldata1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1038_reg_797;
reg   [0:0] icmp_ln1049_reg_827;
reg    imgInput0_413_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln1038_reg_797_pp0_iter1_reg;
reg    rows_blk_n;
reg    cols_bound_per_npc_blk_n;
reg    last_blk_width_blk_n;
reg   [31:0] j_reg_141;
reg   [30:0] i_reg_152;
reg  signed [31:0] rows_2_reg_760;
reg    ap_block_state1;
reg  signed [31:0] cols_bound_per_npc_2_reg_765;
reg  signed [3:0] last_blk_width_1_reg_771;
wire   [31:0] bound_fu_195_p2;
reg   [31:0] bound_reg_777;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_i_fu_199_p2;
reg   [31:0] sub_i_reg_782;
wire   [9:0] sub2_i_fu_204_p2;
reg   [9:0] sub2_i_reg_787;
wire   [9:0] add_ln1057_fu_210_p2;
reg   [9:0] add_ln1057_reg_792;
wire   [0:0] icmp_ln1038_fu_220_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op87_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] add_ln1038_fu_225_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] rem_load_reg_806;
wire   [0:0] bLast_fu_234_p2;
reg   [0:0] bLast_reg_817;
wire  signed [4:0] sext_ln1044_fu_246_p1;
reg  signed [4:0] sext_ln1044_reg_822;
wire   [0:0] icmp_ln1049_fu_265_p2;
reg   [0:0] icmp_ln1049_reg_827_pp0_iter1_reg;
wire   [31:0] j_2_fu_299_p3;
wire   [9:0] sub_ln674_7_fu_394_p2;
reg   [9:0] sub_ln674_7_reg_836;
wire   [511:0] lshr_ln674_3_fu_404_p2;
reg   [511:0] lshr_ln674_3_reg_841;
wire   [0:0] icmp_ln1050_fu_410_p2;
reg   [0:0] icmp_ln1050_reg_846;
wire   [4:0] trunc_ln1051_fu_415_p1;
reg   [4:0] trunc_ln1051_reg_851;
wire   [9:0] sub_ln674_2_fu_490_p2;
reg   [9:0] sub_ln674_2_reg_856;
wire   [511:0] lshr_ln674_fu_500_p2;
reg   [511:0] lshr_ln674_reg_861;
wire   [0:0] icmp_ln414_fu_555_p2;
reg   [0:0] icmp_ln414_reg_866;
wire   [4:0] trunc_ln414_fu_560_p1;
reg   [4:0] trunc_ln414_reg_872;
wire   [4:0] trunc_ln414_1_fu_563_p1;
reg   [4:0] trunc_ln414_1_reg_877;
wire   [4:0] sub_ln414_2_fu_589_p2;
reg   [4:0] sub_ln414_2_reg_882;
wire   [23:0] shl_ln414_fu_599_p2;
reg   [23:0] shl_ln414_reg_887;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [23:0] ap_phi_mux_empty_phi_fu_166_p4;
wire   [23:0] p_Result_3_fu_738_p2;
wire   [23:0] ap_phi_reg_pp0_iter2_empty_reg_163;
wire   [23:0] trunc_ln358_fu_624_p1;
reg   [31:0] rem_fu_102;
wire   [31:0] rem_2_fu_271_p2;
wire   [31:0] rem_1_fu_282_p2;
reg   [511:0] p_Val2_s_fu_106;
reg    ap_block_pp0_stage0_01001;
wire  signed [4:0] last_blk_width_cast1_cast_i_cast_cast_cast_fu_188_p1;
wire   [9:0] last_blk_width_cast1_cast_i_cast_cast_cast_cast_fu_191_p1;
wire   [31:0] zext_ln1027_fu_216_p1;
wire   [3:0] xf_bits_per_clock_fu_239_p3;
wire   [9:0] ptr_width_minus_fu_254_p3;
wire   [31:0] zext_ln1044_fu_250_p1;
wire   [31:0] zext_ln1045_fu_261_p1;
wire   [31:0] add_ln1061_fu_293_p2;
wire   [9:0] select_ln1057_fu_313_p3;
wire   [31:0] zext_ln1057_fu_319_p1;
wire   [31:0] grp_fu_173_p2;
wire   [31:0] sub_ln1057_fu_323_p2;
wire   [9:0] trunc_ln674_1_fu_334_p1;
wire   [9:0] trunc_ln674_2_fu_338_p1;
wire   [0:0] icmp_ln674_1_fu_328_p2;
wire   [9:0] sub_ln674_4_fu_352_p2;
wire   [9:0] sub_ln674_6_fu_364_p2;
reg   [511:0] tmp_3_fu_342_p4;
wire   [9:0] sub_ln674_5_fu_358_p2;
wire   [9:0] select_ln674_3_fu_370_p3;
wire   [9:0] select_ln674_5_fu_386_p3;
wire   [511:0] select_ln674_4_fu_378_p3;
wire   [511:0] zext_ln674_3_fu_400_p1;
wire   [22:0] tmp_fu_418_p4;
wire   [9:0] trunc_ln674_fu_434_p1;
wire   [0:0] icmp_ln674_fu_428_p2;
wire   [9:0] add_ln674_fu_448_p2;
wire   [9:0] sub_ln674_1_fu_460_p2;
reg   [511:0] tmp_1_fu_438_p4;
wire   [9:0] sub_ln674_fu_454_p2;
wire   [9:0] select_ln674_fu_466_p3;
wire   [9:0] select_ln674_2_fu_482_p3;
wire   [511:0] select_ln674_1_fu_474_p3;
wire   [511:0] zext_ln674_fu_496_p1;
wire   [5:0] zext_ln1044_1_fu_307_p1;
wire  signed [5:0] add_ln1054_fu_506_p2;
wire   [9:0] trunc_ln1054_fu_520_p1;
wire  signed [9:0] sext_ln1054_1_fu_516_p1;
wire   [9:0] sub_ln674_3_fu_523_p2;
wire   [9:0] add_ln674_1_fu_529_p2;
wire   [511:0] zext_ln674_2_fu_535_p1;
wire   [511:0] lshr_ln674_2_fu_539_p2;
wire   [511:0] p_Result_2_fu_545_p2;
wire  signed [31:0] sext_ln1054_fu_512_p1;
wire   [4:0] sub_ln414_1_fu_567_p2;
wire   [4:0] select_ln414_fu_573_p3;
wire   [4:0] select_ln414_2_fu_581_p3;
wire   [23:0] p_Repl2_1_fu_551_p1;
wire   [23:0] zext_ln414_1_fu_595_p1;
wire   [511:0] zext_ln674_4_fu_610_p1;
wire   [511:0] lshr_ln674_4_fu_613_p2;
wire   [511:0] p_Result_4_fu_619_p2;
wire   [511:0] zext_ln674_1_fu_629_p1;
wire   [511:0] lshr_ln674_1_fu_632_p2;
wire   [511:0] p_Result_s_fu_638_p2;
wire   [4:0] sub_ln414_fu_647_p2;
wire   [23:0] zext_ln414_fu_652_p1;
wire   [23:0] p_Repl2_s_fu_643_p1;
wire   [23:0] lshr_ln414_fu_656_p2;
wire   [23:0] p_Result_1_fu_662_p2;
wire   [4:0] select_ln414_1_fu_675_p3;
reg   [23:0] tmp_2_fu_687_p4;
wire   [23:0] zext_ln414_2_fu_680_p1;
wire   [23:0] zext_ln414_3_fu_684_p1;
wire   [23:0] shl_ln414_1_fu_702_p2;
wire   [23:0] lshr_ln414_1_fu_708_p2;
wire   [23:0] and_ln414_fu_714_p2;
wire   [23:0] p_Val2_2_fu_668_p3;
wire   [23:0] xor_ln414_fu_720_p2;
wire   [23:0] select_ln414_3_fu_696_p3;
wire   [23:0] and_ln414_1_fu_726_p2;
wire   [23:0] and_ln414_2_fu_732_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

cvtcolor_bgr2hsv_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U36(
    .din0(cols_bound_per_npc_2_reg_765),
    .din1(rows_2_reg_760),
    .dout(bound_fu_195_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_220_p2 == 1'd1))) begin
        i_reg_152 <= add_ln1038_fu_225_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_152 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_220_p2 == 1'd1))) begin
        j_reg_141 <= j_2_fu_299_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_141 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_reg_827 == 1'd1) & (icmp_ln1038_reg_797 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_s_fu_106 <= ldata1_dout;
    end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_fu_106 <= 512'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1049_fu_265_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_220_p2 == 1'd1))) begin
        rem_fu_102 <= rem_1_fu_282_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1049_fu_265_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_220_p2 == 1'd1))) begin
        rem_fu_102 <= rem_2_fu_271_p2;
    end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rem_fu_102 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln1057_reg_792 <= add_ln1057_fu_210_p2;
        bound_reg_777 <= bound_fu_195_p2;
        sub2_i_reg_787 <= sub2_i_fu_204_p2;
        sub_i_reg_782 <= sub_i_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1038_fu_220_p2 == 1'd1))) begin
        bLast_reg_817 <= bLast_fu_234_p2;
        icmp_ln1049_reg_827 <= icmp_ln1049_fu_265_p2;
        rem_load_reg_806 <= rem_fu_102;
        sext_ln1044_reg_822 <= sext_ln1044_fu_246_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_2_reg_765 <= cols_bound_per_npc_dout;
        last_blk_width_1_reg_771 <= last_blk_width_dout;
        rows_2_reg_760 <= rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1038_reg_797 <= icmp_ln1038_fu_220_p2;
        icmp_ln1038_reg_797_pp0_iter1_reg <= icmp_ln1038_reg_797;
        icmp_ln1049_reg_827_pp0_iter1_reg <= icmp_ln1049_reg_827;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_reg_827 == 1'd1) & (icmp_ln1038_reg_797 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1050_reg_846 <= icmp_ln1050_fu_410_p2;
        icmp_ln414_reg_866 <= icmp_ln414_fu_555_p2;
        lshr_ln674_reg_861 <= lshr_ln674_fu_500_p2;
        shl_ln414_reg_887 <= shl_ln414_fu_599_p2;
        sub_ln414_2_reg_882 <= sub_ln414_2_fu_589_p2;
        sub_ln674_2_reg_856 <= sub_ln674_2_fu_490_p2;
        trunc_ln1051_reg_851 <= trunc_ln1051_fu_415_p1;
        trunc_ln414_1_reg_877 <= trunc_ln414_1_fu_563_p1;
        trunc_ln414_reg_872 <= trunc_ln414_fu_560_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_reg_827 == 1'd0) & (icmp_ln1038_reg_797 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln674_3_reg_841 <= lshr_ln674_3_fu_404_p2;
        sub_ln674_7_reg_836 <= sub_ln674_7_fu_394_p2;
    end
end

always @ (*) begin
    if ((icmp_ln1038_fu_220_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1038_reg_797_pp0_iter1_reg == 1'd1)) begin
        if ((icmp_ln1049_reg_827_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_166_p4 = trunc_ln358_fu_624_p1;
        end else if ((icmp_ln1049_reg_827_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_166_p4 = p_Result_3_fu_738_p2;
        end else begin
            ap_phi_mux_empty_phi_fu_166_p4 = ap_phi_reg_pp0_iter2_empty_reg_163;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_166_p4 = ap_phi_reg_pp0_iter2_empty_reg_163;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_blk_n = cols_bound_per_npc_empty_n;
    end else begin
        cols_bound_per_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_read = 1'b1;
    end else begin
        cols_bound_per_npc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1038_reg_797_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        imgInput0_413_blk_n = imgInput0_413_full_n;
    end else begin
        imgInput0_413_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1038_reg_797_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imgInput0_413_write = 1'b1;
    end else begin
        imgInput0_413_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_blk_n = last_blk_width_empty_n;
    end else begin
        last_blk_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_read = 1'b1;
    end else begin
        last_blk_width_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1049_reg_827 == 1'd1) & (icmp_ln1038_reg_797 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ldata1_blk_n = ldata1_empty_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op87_read_state4 == 1'b1))) begin
        ldata1_read = 1'b1;
    end else begin
        ldata1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_220_p2 == 1'd0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_220_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1038_fu_225_p2 = (i_reg_152 + 31'd1);

assign add_ln1054_fu_506_p2 = ($signed(6'd63) + $signed(zext_ln1044_1_fu_307_p1));

assign add_ln1057_fu_210_p2 = (last_blk_width_cast1_cast_i_cast_cast_cast_cast_fu_191_p1 + 10'd511);

assign add_ln1061_fu_293_p2 = (j_reg_141 + 32'd1);

assign add_ln674_1_fu_529_p2 = (10'd511 + sub_ln674_3_fu_523_p2);

assign add_ln674_fu_448_p2 = ($signed(10'd513) + $signed(trunc_ln674_fu_434_p1));

assign and_ln414_1_fu_726_p2 = (xor_ln414_fu_720_p2 & p_Val2_2_fu_668_p3);

assign and_ln414_2_fu_732_p2 = (select_ln414_3_fu_696_p3 & and_ln414_fu_714_p2);

assign and_ln414_fu_714_p2 = (shl_ln414_1_fu_702_p2 & lshr_ln414_1_fu_708_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1038_reg_797_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (imgInput0_413_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op87_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1038_reg_797_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (imgInput0_413_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op87_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1038_reg_797_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (imgInput0_413_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op87_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((ldata1_empty_n == 1'b0) & (ap_predicate_op87_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln1038_reg_797_pp0_iter1_reg == 1'd1) & (imgInput0_413_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter2_empty_reg_163 = 'bx;

always @ (*) begin
    ap_predicate_op87_read_state4 = ((icmp_ln1049_reg_827 == 1'd1) & (icmp_ln1038_reg_797 == 1'd1));
end

assign bLast_fu_234_p2 = ((j_reg_141 == sub_i_reg_782) ? 1'b1 : 1'b0);

assign grp_fu_173_p2 = (32'd512 - rem_load_reg_806);

assign icmp_ln1038_fu_220_p2 = (($signed(zext_ln1027_fu_216_p1) < $signed(bound_reg_777)) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_265_p2 = (($signed(rem_fu_102) < $signed(zext_ln1044_fu_250_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1050_fu_410_p2 = ((rem_load_reg_806 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_555_p2 = ((rem_load_reg_806 > sext_ln1054_fu_512_p1) ? 1'b1 : 1'b0);

assign icmp_ln674_1_fu_328_p2 = ((grp_fu_173_p2 > sub_ln1057_fu_323_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_428_p2 = ((tmp_fu_418_p4 != 23'd0) ? 1'b1 : 1'b0);

assign imgInput0_413_din = ap_phi_mux_empty_phi_fu_166_p4;

assign j_2_fu_299_p3 = ((bLast_fu_234_p2[0:0] === 1'b1) ? 32'd0 : add_ln1061_fu_293_p2);

assign last_blk_width_cast1_cast_i_cast_cast_cast_cast_fu_191_p1 = $unsigned(last_blk_width_cast1_cast_i_cast_cast_cast_fu_188_p1);

assign last_blk_width_cast1_cast_i_cast_cast_cast_fu_188_p1 = last_blk_width_1_reg_771;

assign lshr_ln414_1_fu_708_p2 = 24'd16777215 >> zext_ln414_3_fu_684_p1;

assign lshr_ln414_fu_656_p2 = 24'd16777215 >> zext_ln414_fu_652_p1;

assign lshr_ln674_1_fu_632_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln674_1_fu_629_p1;

assign lshr_ln674_2_fu_539_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln674_2_fu_535_p1;

assign lshr_ln674_3_fu_404_p2 = select_ln674_4_fu_378_p3 >> zext_ln674_3_fu_400_p1;

assign lshr_ln674_4_fu_613_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln674_4_fu_610_p1;

assign lshr_ln674_fu_500_p2 = select_ln674_1_fu_474_p3 >> zext_ln674_fu_496_p1;

assign p_Repl2_1_fu_551_p1 = p_Result_2_fu_545_p2[23:0];

assign p_Repl2_s_fu_643_p1 = p_Result_s_fu_638_p2[23:0];

assign p_Result_1_fu_662_p2 = (p_Repl2_s_fu_643_p1 & lshr_ln414_fu_656_p2);

assign p_Result_2_fu_545_p2 = (lshr_ln674_2_fu_539_p2 & ldata1_dout);

assign p_Result_3_fu_738_p2 = (and_ln414_2_fu_732_p2 | and_ln414_1_fu_726_p2);

assign p_Result_4_fu_619_p2 = (lshr_ln674_4_fu_613_p2 & lshr_ln674_3_reg_841);

assign p_Result_s_fu_638_p2 = (lshr_ln674_reg_861 & lshr_ln674_1_fu_632_p2);

assign p_Val2_2_fu_668_p3 = ((icmp_ln1050_reg_846[0:0] === 1'b1) ? 24'd0 : p_Result_1_fu_662_p2);

assign ptr_width_minus_fu_254_p3 = ((bLast_fu_234_p2[0:0] === 1'b1) ? sub2_i_reg_787 : 10'd488);

assign rem_1_fu_282_p2 = (rem_fu_102 + zext_ln1045_fu_261_p1);

assign rem_2_fu_271_p2 = (rem_fu_102 - zext_ln1044_fu_250_p1);

assign select_ln1057_fu_313_p3 = ((bLast_reg_817[0:0] === 1'b1) ? add_ln1057_reg_792 : 10'd535);

assign select_ln414_1_fu_675_p3 = ((icmp_ln414_reg_866[0:0] === 1'b1) ? trunc_ln414_1_reg_877 : trunc_ln414_reg_872);

assign select_ln414_2_fu_581_p3 = ((icmp_ln414_fu_555_p2[0:0] === 1'b1) ? sub_ln414_1_fu_567_p2 : trunc_ln414_fu_560_p1);

assign select_ln414_3_fu_696_p3 = ((icmp_ln414_reg_866[0:0] === 1'b1) ? tmp_2_fu_687_p4 : shl_ln414_reg_887);

assign select_ln414_fu_573_p3 = ((icmp_ln414_fu_555_p2[0:0] === 1'b1) ? trunc_ln414_fu_560_p1 : trunc_ln414_1_fu_563_p1);

assign select_ln674_1_fu_474_p3 = ((icmp_ln674_fu_428_p2[0:0] === 1'b1) ? tmp_1_fu_438_p4 : p_Val2_s_fu_106);

assign select_ln674_2_fu_482_p3 = ((icmp_ln674_fu_428_p2[0:0] === 1'b1) ? sub_ln674_fu_454_p2 : trunc_ln674_fu_434_p1);

assign select_ln674_3_fu_370_p3 = ((icmp_ln674_1_fu_328_p2[0:0] === 1'b1) ? sub_ln674_4_fu_352_p2 : sub_ln674_6_fu_364_p2);

assign select_ln674_4_fu_378_p3 = ((icmp_ln674_1_fu_328_p2[0:0] === 1'b1) ? tmp_3_fu_342_p4 : p_Val2_s_fu_106);

assign select_ln674_5_fu_386_p3 = ((icmp_ln674_1_fu_328_p2[0:0] === 1'b1) ? sub_ln674_5_fu_358_p2 : trunc_ln674_1_fu_334_p1);

assign select_ln674_fu_466_p3 = ((icmp_ln674_fu_428_p2[0:0] === 1'b1) ? add_ln674_fu_448_p2 : sub_ln674_1_fu_460_p2);

assign sext_ln1044_fu_246_p1 = $signed(xf_bits_per_clock_fu_239_p3);

assign sext_ln1054_1_fu_516_p1 = add_ln1054_fu_506_p2;

assign sext_ln1054_fu_512_p1 = add_ln1054_fu_506_p2;

assign shl_ln414_1_fu_702_p2 = 24'd16777215 << zext_ln414_2_fu_680_p1;

assign shl_ln414_fu_599_p2 = p_Repl2_1_fu_551_p1 << zext_ln414_1_fu_595_p1;

assign sub2_i_fu_204_p2 = ($signed(10'd512) - $signed(last_blk_width_cast1_cast_i_cast_cast_cast_cast_fu_191_p1));

assign sub_i_fu_199_p2 = ($signed(cols_bound_per_npc_2_reg_765) + $signed(32'd4294967295));

assign sub_ln1057_fu_323_p2 = (zext_ln1057_fu_319_p1 - rem_load_reg_806);

assign sub_ln414_1_fu_567_p2 = ($signed(5'd23) - $signed(trunc_ln414_fu_560_p1));

assign sub_ln414_2_fu_589_p2 = ($signed(5'd23) - $signed(select_ln414_fu_573_p3));

assign sub_ln414_fu_647_p2 = ($signed(5'd24) - $signed(trunc_ln1051_reg_851));

assign sub_ln674_1_fu_460_p2 = (10'd511 - trunc_ln674_fu_434_p1);

assign sub_ln674_2_fu_490_p2 = (10'd511 - select_ln674_fu_466_p3);

assign sub_ln674_3_fu_523_p2 = ($signed(trunc_ln1054_fu_520_p1) - $signed(sext_ln1054_1_fu_516_p1));

assign sub_ln674_4_fu_352_p2 = (trunc_ln674_1_fu_334_p1 - trunc_ln674_2_fu_338_p1);

assign sub_ln674_5_fu_358_p2 = (10'd511 - trunc_ln674_1_fu_334_p1);

assign sub_ln674_6_fu_364_p2 = (trunc_ln674_2_fu_338_p1 - trunc_ln674_1_fu_334_p1);

assign sub_ln674_7_fu_394_p2 = (10'd511 - select_ln674_3_fu_370_p3);

assign sub_ln674_fu_454_p2 = (10'd511 - trunc_ln674_fu_434_p1);

integer ap_tvar_int_0;

always @ (p_Val2_s_fu_106) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_1_fu_438_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_438_p4[ap_tvar_int_0] = p_Val2_s_fu_106[511 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln414_reg_887) begin
    for (ap_tvar_int_1 = 24 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 23 - 0) begin
            tmp_2_fu_687_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_2_fu_687_p4[ap_tvar_int_1] = shl_ln414_reg_887[23 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (p_Val2_s_fu_106) begin
    for (ap_tvar_int_2 = 512 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 511 - 0) begin
            tmp_3_fu_342_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_3_fu_342_p4[ap_tvar_int_2] = p_Val2_s_fu_106[511 - ap_tvar_int_2];
        end
    end
end

assign tmp_fu_418_p4 = {{grp_fu_173_p2[31:9]}};

assign trunc_ln1051_fu_415_p1 = rem_load_reg_806[4:0];

assign trunc_ln1054_fu_520_p1 = rem_load_reg_806[9:0];

assign trunc_ln358_fu_624_p1 = p_Result_4_fu_619_p2[23:0];

assign trunc_ln414_1_fu_563_p1 = add_ln1054_fu_506_p2[4:0];

assign trunc_ln414_fu_560_p1 = rem_load_reg_806[4:0];

assign trunc_ln674_1_fu_334_p1 = grp_fu_173_p2[9:0];

assign trunc_ln674_2_fu_338_p1 = sub_ln1057_fu_323_p2[9:0];

assign trunc_ln674_fu_434_p1 = grp_fu_173_p2[9:0];

assign xf_bits_per_clock_fu_239_p3 = ((bLast_fu_234_p2[0:0] === 1'b1) ? last_blk_width_1_reg_771 : 4'd8);

assign xor_ln414_fu_720_p2 = (24'd16777215 ^ and_ln414_fu_714_p2);

assign zext_ln1027_fu_216_p1 = i_reg_152;

assign zext_ln1044_1_fu_307_p1 = $unsigned(sext_ln1044_reg_822);

assign zext_ln1044_fu_250_p1 = $unsigned(sext_ln1044_fu_246_p1);

assign zext_ln1045_fu_261_p1 = ptr_width_minus_fu_254_p3;

assign zext_ln1057_fu_319_p1 = select_ln1057_fu_313_p3;

assign zext_ln414_1_fu_595_p1 = select_ln414_2_fu_581_p3;

assign zext_ln414_2_fu_680_p1 = select_ln414_1_fu_675_p3;

assign zext_ln414_3_fu_684_p1 = sub_ln414_2_reg_882;

assign zext_ln414_fu_652_p1 = sub_ln414_fu_647_p2;

assign zext_ln674_1_fu_629_p1 = sub_ln674_2_reg_856;

assign zext_ln674_2_fu_535_p1 = add_ln674_1_fu_529_p2;

assign zext_ln674_3_fu_400_p1 = select_ln674_5_fu_386_p3;

assign zext_ln674_4_fu_610_p1 = sub_ln674_7_reg_836;

assign zext_ln674_fu_496_p1 = select_ln674_2_fu_482_p3;

endmodule //cvtcolor_bgr2hsv_AxiStream2MatStream
