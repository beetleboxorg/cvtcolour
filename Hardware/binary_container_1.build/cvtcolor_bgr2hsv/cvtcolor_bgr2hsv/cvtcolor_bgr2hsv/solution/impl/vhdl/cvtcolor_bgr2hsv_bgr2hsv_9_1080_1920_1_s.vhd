-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgInput0_413_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    imgInput0_413_empty_n : IN STD_LOGIC;
    imgInput0_413_read : OUT STD_LOGIC;
    imgOutput0_414_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    imgOutput0_414_full_n : IN STD_LOGIC;
    imgOutput0_414_write : OUT STD_LOGIC;
    p_src_mat_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_mat_1_empty_n : IN STD_LOGIC;
    p_src_mat_1_read : OUT STD_LOGIC;
    p_src_mat_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_mat_2_empty_n : IN STD_LOGIC;
    p_src_mat_2_read : OUT STD_LOGIC );
end;


architecture behav of cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv20_800 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_const_lv30_800 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal xf_cv_icvSaturate8u_cv_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce0 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce1 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce2 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xf_cv_icvSaturate8u_cv_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xf_cv_icvSaturate8u_cv_ce3 : STD_LOGIC;
    signal xf_cv_icvSaturate8u_cv_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_ce0 : STD_LOGIC;
    signal void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_ce0 : STD_LOGIC;
    signal void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal imgInput0_413_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln124_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal imgOutput0_414_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln124_reg_675_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_src_mat_1_blk_n : STD_LOGIC;
    signal p_src_mat_2_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_220 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_src_mat_1_read_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_src_mat_2_read_reg_665 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln73_fu_237_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln73_reg_670 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln124_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln124_reg_675_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_675_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_675_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_675_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_675_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln124_fu_248_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal v_fu_254_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_reg_684 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_reg_684_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_i_fu_258_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_i_reg_690 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_i_reg_690_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_i_reg_695 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln119_fu_278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln119_reg_701 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln119_reg_701_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_fu_282_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_reg_708 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_reg_708_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal xf_cv_icvSaturate8u_cv_load_reg_724 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal zext_ln119_1_fu_329_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln119_1_reg_729 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_1_fu_333_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_1_reg_734 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln696_fu_353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln696_reg_744 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1351_fu_362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1351_reg_749 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln216_2_fu_396_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln216_2_reg_760 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln216_2_reg_760_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln216_2_reg_760_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln216_2_reg_760_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln216_1_fu_406_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln216_1_reg_765 : STD_LOGIC_VECTOR (7 downto 0);
    signal vr_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vr_reg_770 : STD_LOGIC_VECTOR (0 downto 0);
    signal vg_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal vg_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1351_4_fu_431_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1351_4_reg_787 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln151_fu_455_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln151_reg_792 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln151_1_fu_481_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln151_1_reg_797 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal zext_ln538_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln538_1_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln538_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln538_2_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln150_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln538_3_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln73_fu_237_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln73_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1351_fu_286_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1350_fu_292_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1351_2_fu_303_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln1350_fu_309_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln141_fu_320_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal v_1_fu_324_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1351_1_fu_336_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1350_1_fu_342_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_2_fu_358_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1351_3_fu_365_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln1350_1_fu_371_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln142_fu_382_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln216_fu_391_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln216_fu_401_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_2_fu_386_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln874_fu_417_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1351_5_fu_435_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_443_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln151_1_fu_439_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln151_fu_451_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1351_6_fu_461_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln151_1_fu_469_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln151_3_fu_465_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln151_1_fu_477_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln122_fu_492_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln1352_fu_513_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln151_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln122_1_fu_499_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln151_fu_535_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln151_1_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1351_1_fu_549_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln151_1_fu_557_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln151_2_fu_540_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln151_4_fu_562_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln151_2_fu_566_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln1351_fu_527_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal and_ln151_2_fu_572_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln152_fu_582_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_639_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_648_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_608_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln153_fu_615_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_fu_599_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal op_assign_1_fu_590_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln155_fu_623_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_639_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_639_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_639_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_648_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_648_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_639_ce : STD_LOGIC;
    signal grp_fu_648_ce : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_639_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_648_p20 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln73_fu_237_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln73_fu_237_p10 : STD_LOGIC_VECTOR (63 downto 0);

    component cvtcolor_bgr2hsv_mul_32ns_32ns_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cvtcolor_bgr2hsv_mac_muladd_8ns_20s_13ns_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component cvtcolor_bgr2hsv_ama_addmuladd_9s_13s_17ns_13ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        din3 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_xf_cv_icvSaturate8u_cv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    xf_cv_icvSaturate8u_cv_U : component cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_xf_cv_icvSaturate8u_cv
    generic map (
        DataWidth => 8,
        AddressRange => 769,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xf_cv_icvSaturate8u_cv_address0,
        ce0 => xf_cv_icvSaturate8u_cv_ce0,
        q0 => xf_cv_icvSaturate8u_cv_q0,
        address1 => xf_cv_icvSaturate8u_cv_address1,
        ce1 => xf_cv_icvSaturate8u_cv_ce1,
        q1 => xf_cv_icvSaturate8u_cv_q1,
        address2 => xf_cv_icvSaturate8u_cv_address2,
        ce2 => xf_cv_icvSaturate8u_cv_ce2,
        q2 => xf_cv_icvSaturate8u_cv_q2,
        address3 => xf_cv_icvSaturate8u_cv_address3,
        ce3 => xf_cv_icvSaturate8u_cv_ce3,
        q3 => xf_cv_icvSaturate8u_cv_q3);

    void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_U : component cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_address0,
        ce0 => void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_ce0,
        q0 => void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_q0);

    void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_U : component cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_cud
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_address0,
        ce0 => void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_ce0,
        q0 => void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_q0);

    mul_32ns_32ns_64_1_1_U70 : component cvtcolor_bgr2hsv_mul_32ns_32ns_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => mul_ln73_fu_237_p0,
        din1 => mul_ln73_fu_237_p1,
        dout => mul_ln73_fu_237_p2);

    mac_muladd_8ns_20s_13ns_20_4_1_U71 : component cvtcolor_bgr2hsv_mac_muladd_8ns_20s_13ns_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 20,
        din2_WIDTH => 13,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_639_p0,
        din1 => grp_fu_639_p1,
        din2 => grp_fu_639_p2,
        ce => grp_fu_639_ce,
        dout => grp_fu_639_p3);

    ama_addmuladd_9s_13s_17ns_13ns_30_4_1_U72 : component cvtcolor_bgr2hsv_ama_addmuladd_9s_13s_17ns_13ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 13,
        din2_WIDTH => 17,
        din3_WIDTH => 13,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln1352_fu_513_p2,
        din1 => and_ln151_2_fu_572_p2,
        din2 => grp_fu_648_p2,
        din3 => grp_fu_648_p3,
        ce => grp_fu_648_ce,
        dout => grp_fu_648_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln124_fu_243_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_220 <= add_ln124_fu_248_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_220 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln124_reg_675_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln151_1_reg_797 <= add_ln151_1_fu_481_p2;
                add_ln151_reg_792 <= add_ln151_fu_455_p2;
                add_ln216_1_reg_765 <= add_ln216_1_fu_406_p2;
                add_ln216_2_reg_760 <= add_ln216_2_fu_396_p2;
                sub_ln1351_4_reg_787 <= sub_ln1351_4_fu_431_p2;
                vg_reg_776 <= vg_fu_420_p2;
                vr_reg_770 <= vr_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln216_2_reg_760_pp0_iter4_reg <= add_ln216_2_reg_760;
                add_ln216_2_reg_760_pp0_iter5_reg <= add_ln216_2_reg_760_pp0_iter4_reg;
                add_ln216_2_reg_760_pp0_iter6_reg <= add_ln216_2_reg_760_pp0_iter5_reg;
                icmp_ln124_reg_675_pp0_iter2_reg <= icmp_ln124_reg_675_pp0_iter1_reg;
                icmp_ln124_reg_675_pp0_iter3_reg <= icmp_ln124_reg_675_pp0_iter2_reg;
                icmp_ln124_reg_675_pp0_iter4_reg <= icmp_ln124_reg_675_pp0_iter3_reg;
                icmp_ln124_reg_675_pp0_iter5_reg <= icmp_ln124_reg_675_pp0_iter4_reg;
                icmp_ln124_reg_675_pp0_iter6_reg <= icmp_ln124_reg_675_pp0_iter5_reg;
                p_Result_1_i_reg_690_pp0_iter2_reg <= p_Result_1_i_reg_690;
                v_reg_684_pp0_iter2_reg <= v_reg_684;
                    zext_ln119_reg_701_pp0_iter2_reg(7 downto 0) <= zext_ln119_reg_701(7 downto 0);
                    zext_ln215_reg_708_pp0_iter2_reg(7 downto 0) <= zext_ln215_reg_708(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln124_reg_675 <= icmp_ln124_fu_243_p2;
                icmp_ln124_reg_675_pp0_iter1_reg <= icmp_ln124_reg_675;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_ln73_reg_670 <= mul_ln73_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_reg_675 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_1_i_reg_690 <= imgInput0_413_dout(15 downto 8);
                p_Result_2_i_reg_695 <= imgInput0_413_dout(23 downto 16);
                v_reg_684 <= v_fu_254_p1;
                    zext_ln119_reg_701(7 downto 0) <= zext_ln119_fu_278_p1(7 downto 0);
                    zext_ln215_reg_708(7 downto 0) <= zext_ln215_fu_282_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_src_mat_2_empty_n = ap_const_logic_0) or (p_src_mat_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_src_mat_1_read_reg_660 <= p_src_mat_1_dout;
                p_src_mat_2_read_reg_665 <= p_src_mat_2_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln124_reg_675_pp0_iter1_reg = ap_const_lv1_0))) then
                sub_ln696_reg_744 <= sub_ln696_fu_353_p2;
                    zext_ln119_1_reg_729(8 downto 0) <= zext_ln119_1_fu_329_p1(8 downto 0);
                    zext_ln1351_reg_749(7 downto 0) <= zext_ln1351_fu_362_p1(7 downto 0);
                    zext_ln215_1_reg_734(7 downto 0) <= zext_ln215_1_fu_333_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln124_reg_675_pp0_iter1_reg = ap_const_lv1_0))) then
                xf_cv_icvSaturate8u_cv_load_reg_724 <= xf_cv_icvSaturate8u_cv_q3;
            end if;
        end if;
    end process;
    zext_ln119_reg_701(8) <= '0';
    zext_ln119_reg_701_pp0_iter2_reg(8) <= '0';
    zext_ln215_reg_708(8) <= '0';
    zext_ln215_reg_708_pp0_iter2_reg(8) <= '0';
    zext_ln119_1_reg_729(9) <= '0';
    zext_ln215_1_reg_734(9 downto 8) <= "00";
    zext_ln1351_reg_749(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_src_mat_1_empty_n, p_src_mat_2_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, icmp_ln124_fu_243_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_src_mat_2_empty_n = ap_const_logic_0) or (p_src_mat_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln124_fu_243_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln124_fu_243_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln124_fu_248_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_220) + unsigned(ap_const_lv64_1));
    add_ln1350_1_fu_342_p2 <= std_logic_vector(unsigned(ap_const_lv10_100) + unsigned(sub_ln1351_1_fu_336_p2));
    add_ln1350_fu_292_p2 <= std_logic_vector(unsigned(zext_ln215_fu_282_p1) + unsigned(sub_ln1351_fu_286_p2));
    add_ln151_1_fu_481_p2 <= std_logic_vector(signed(sext_ln151_3_fu_465_p1) + signed(zext_ln151_1_fu_477_p1));
    add_ln151_2_fu_566_p2 <= std_logic_vector(signed(sext_ln151_2_fu_540_p1) + signed(sext_ln151_4_fu_562_p1));
    add_ln151_fu_455_p2 <= std_logic_vector(signed(sext_ln151_1_fu_439_p1) + signed(zext_ln151_fu_451_p1));
    add_ln155_fu_623_p2 <= std_logic_vector(unsigned(select_ln153_fu_615_p3) + unsigned(trunc_ln1_fu_599_p4));
    add_ln216_1_fu_406_p2 <= std_logic_vector(unsigned(add_ln216_2_fu_396_p2) + unsigned(sub_ln216_fu_401_p2));
    add_ln216_2_fu_396_p2 <= std_logic_vector(unsigned(xf_cv_icvSaturate8u_cv_load_reg_724) + unsigned(add_ln216_fu_391_p2));
    add_ln216_fu_391_p2 <= std_logic_vector(unsigned(v_reg_684_pp0_iter2_reg) + unsigned(xf_cv_icvSaturate8u_cv_q1));
    and_ln1352_fu_513_p2 <= (sub_ln1351_4_reg_787 and select_ln122_fu_492_p3);
    and_ln151_1_fu_557_p2 <= (select_ln1351_1_fu_549_p3 and add_ln151_1_reg_797);
    and_ln151_2_fu_572_p2 <= (select_ln1351_fu_527_p3 and add_ln151_2_fu_566_p2);
    and_ln151_fu_535_p2 <= (select_ln122_1_fu_499_p3 and add_ln151_reg_792);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(imgInput0_413_empty_n, imgOutput0_414_full_n, ap_enable_reg_pp0_iter1, icmp_ln124_reg_675, ap_enable_reg_pp0_iter7, icmp_ln124_reg_675_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln124_reg_675_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (imgOutput0_414_full_n = ap_const_logic_0)) or ((icmp_ln124_reg_675 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (imgInput0_413_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(imgInput0_413_empty_n, imgOutput0_414_full_n, ap_enable_reg_pp0_iter1, icmp_ln124_reg_675, ap_enable_reg_pp0_iter7, icmp_ln124_reg_675_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln124_reg_675_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (imgOutput0_414_full_n = ap_const_logic_0)) or ((icmp_ln124_reg_675 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (imgInput0_413_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(imgInput0_413_empty_n, imgOutput0_414_full_n, ap_enable_reg_pp0_iter1, icmp_ln124_reg_675, ap_enable_reg_pp0_iter7, icmp_ln124_reg_675_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln124_reg_675_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (imgOutput0_414_full_n = ap_const_logic_0)) or ((icmp_ln124_reg_675 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (imgInput0_413_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_mat_1_empty_n, p_src_mat_2_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_src_mat_2_empty_n = ap_const_logic_0) or (p_src_mat_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter7_assign_proc : process(imgOutput0_414_full_n, icmp_ln124_reg_675_pp0_iter6_reg)
    begin
                ap_block_state10_pp0_stage0_iter7 <= ((icmp_ln124_reg_675_pp0_iter6_reg = ap_const_lv1_0) and (imgOutput0_414_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(imgInput0_413_empty_n, icmp_ln124_reg_675)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln124_reg_675 = ap_const_lv1_0) and (imgInput0_413_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln124_fu_243_p2)
    begin
        if ((icmp_ln124_fu_243_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_639_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_639_ce <= ap_const_logic_1;
        else 
            grp_fu_639_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_639_p0 <= grp_fu_639_p00(8 - 1 downto 0);
    grp_fu_639_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln216_1_reg_765),20));
    grp_fu_639_p1 <= void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_q0(20 - 1 downto 0);
    grp_fu_639_p2 <= ap_const_lv20_800(13 - 1 downto 0);

    grp_fu_648_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_648_ce <= ap_const_logic_1;
        else 
            grp_fu_648_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_648_p2 <= grp_fu_648_p20(17 - 1 downto 0);
    grp_fu_648_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln152_fu_582_p1),30));
    grp_fu_648_p3 <= ap_const_lv30_800(13 - 1 downto 0);
    icmp_ln124_fu_243_p2 <= "1" when (indvar_flatten_reg_220 = mul_ln73_reg_670) else "0";

    imgInput0_413_blk_n_assign_proc : process(imgInput0_413_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln124_reg_675)
    begin
        if (((icmp_ln124_reg_675 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput0_413_blk_n <= imgInput0_413_empty_n;
        else 
            imgInput0_413_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgInput0_413_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln124_reg_675, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln124_reg_675 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput0_413_read <= ap_const_logic_1;
        else 
            imgInput0_413_read <= ap_const_logic_0;
        end if; 
    end process;


    imgOutput0_414_blk_n_assign_proc : process(imgOutput0_414_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, icmp_ln124_reg_675_pp0_iter6_reg)
    begin
        if (((icmp_ln124_reg_675_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            imgOutput0_414_blk_n <= imgOutput0_414_full_n;
        else 
            imgOutput0_414_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgOutput0_414_din <= ((add_ln216_2_reg_760_pp0_iter6_reg & op_assign_1_fu_590_p4) & add_ln155_fu_623_p2);

    imgOutput0_414_write_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln124_reg_675_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln124_reg_675_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            imgOutput0_414_write <= ap_const_logic_1;
        else 
            imgOutput0_414_write <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln73_fu_237_p0 <= mul_ln73_fu_237_p00(32 - 1 downto 0);
    mul_ln73_fu_237_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_src_mat_2_read_reg_665),64));
    mul_ln73_fu_237_p1 <= mul_ln73_fu_237_p10(32 - 1 downto 0);
    mul_ln73_fu_237_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_src_mat_1_read_reg_660),64));
    op_assign_1_fu_590_p4 <= grp_fu_639_p3(19 downto 12);
    p_Result_1_i_fu_258_p4 <= imgInput0_413_dout(15 downto 8);

    p_src_mat_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_mat_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_mat_1_blk_n <= p_src_mat_1_empty_n;
        else 
            p_src_mat_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_mat_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_mat_1_empty_n, p_src_mat_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_mat_2_empty_n = ap_const_logic_0) or (p_src_mat_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_mat_1_read <= ap_const_logic_1;
        else 
            p_src_mat_1_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_mat_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_mat_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_mat_2_blk_n <= p_src_mat_2_empty_n;
        else 
            p_src_mat_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_mat_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_mat_1_empty_n, p_src_mat_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_mat_2_empty_n = ap_const_logic_0) or (p_src_mat_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_mat_2_read <= ap_const_logic_1;
        else 
            p_src_mat_2_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln122_1_fu_499_p3 <= 
        ap_const_lv11_7FF when (vg_reg_776(0) = '1') else 
        ap_const_lv11_0;
    select_ln122_fu_492_p3 <= 
        ap_const_lv9_1FF when (vr_reg_770(0) = '1') else 
        ap_const_lv9_0;
    select_ln1351_1_fu_549_p3 <= 
        ap_const_lv12_FFF when (xor_ln151_1_fu_544_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln1351_fu_527_p3 <= 
        ap_const_lv13_1FFF when (xor_ln151_fu_522_p2(0) = '1') else 
        ap_const_lv13_0;
    select_ln153_fu_615_p3 <= 
        ap_const_lv8_B4 when (tmp_fu_608_p3(0) = '1') else 
        ap_const_lv8_0;
        sext_ln151_1_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1351_5_fu_435_p2),11));

        sext_ln151_2_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln151_fu_535_p2),13));

        sext_ln151_3_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1351_6_fu_461_p2),12));

        sext_ln151_4_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(and_ln151_1_fu_557_p2),13));

        sext_ln538_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1350_1_fu_342_p2),64));

    shl_ln151_1_fu_469_p3 <= (add_ln216_1_fu_406_p2 & ap_const_lv2_0);
    shl_ln_fu_443_p3 <= (add_ln216_1_fu_406_p2 & ap_const_lv1_0);
    sub_ln1351_1_fu_336_p2 <= std_logic_vector(unsigned(zext_ln215_1_fu_333_p1) - unsigned(zext_ln119_1_fu_329_p1));
    sub_ln1351_2_fu_303_p2 <= std_logic_vector(unsigned(zext_ln119_fu_278_p1) - unsigned(zext_ln215_fu_282_p1));
    sub_ln1351_3_fu_365_p2 <= std_logic_vector(unsigned(zext_ln215_2_fu_358_p1) - unsigned(zext_ln1351_fu_362_p1));
    sub_ln1351_4_fu_431_p2 <= std_logic_vector(unsigned(zext_ln215_reg_708_pp0_iter2_reg) - unsigned(zext_ln119_reg_701_pp0_iter2_reg));
    sub_ln1351_5_fu_435_p2 <= std_logic_vector(unsigned(zext_ln119_reg_701_pp0_iter2_reg) - unsigned(zext_ln1351_reg_749));
    sub_ln1351_6_fu_461_p2 <= std_logic_vector(unsigned(zext_ln1351_reg_749) - unsigned(zext_ln215_reg_708_pp0_iter2_reg));
    sub_ln1351_fu_286_p2 <= std_logic_vector(signed(ap_const_lv9_100) - signed(zext_ln119_fu_278_p1));
    sub_ln216_fu_401_p2 <= std_logic_vector(unsigned(xf_cv_icvSaturate8u_cv_q0) - unsigned(sub_ln696_reg_744));
    sub_ln696_fu_353_p2 <= std_logic_vector(unsigned(v_reg_684) - unsigned(xf_cv_icvSaturate8u_cv_q2));
    tmp_fu_608_p3 <= grp_fu_648_p4(29 downto 29);
    trunc_ln152_fu_582_p1 <= void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_q0(17 - 1 downto 0);
    trunc_ln1_fu_599_p4 <= grp_fu_648_p4(19 downto 12);
    v_1_fu_324_p2 <= std_logic_vector(unsigned(zext_ln119_reg_701) + unsigned(zext_ln141_fu_320_p1));
    v_2_fu_386_p2 <= std_logic_vector(unsigned(zext_ln142_fu_382_p1) + unsigned(zext_ln119_1_reg_729));
    v_fu_254_p1 <= imgInput0_413_dout(8 - 1 downto 0);
    vg_fu_420_p2 <= "1" when (v_2_fu_386_p2 = zext_ln874_fu_417_p1) else "0";
    void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_address0 <= zext_ln538_3_fu_487_p1(8 - 1 downto 0);

    void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_ce0 <= ap_const_logic_1;
        else 
            void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_hdiv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_address0 <= zext_ln150_fu_426_p1(8 - 1 downto 0);

    void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_ce0 <= ap_const_logic_1;
        else 
            void_bgr2hsv_9_1080_1920_1_Mat_9_1080_1920_1_2_Mat_9_1080_1920_1_2_sdiv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    vr_fu_412_p2 <= "1" when (v_2_fu_386_p2 = zext_ln215_1_reg_734) else "0";
    xf_cv_icvSaturate8u_cv_address0 <= zext_ln538_2_fu_377_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address1 <= sext_ln538_fu_348_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address2 <= zext_ln538_1_fu_315_p1(10 - 1 downto 0);
    xf_cv_icvSaturate8u_cv_address3 <= zext_ln538_fu_298_p1(10 - 1 downto 0);

    xf_cv_icvSaturate8u_cv_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce0 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            xf_cv_icvSaturate8u_cv_ce1 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xf_cv_icvSaturate8u_cv_ce2 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    xf_cv_icvSaturate8u_cv_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            xf_cv_icvSaturate8u_cv_ce3 <= ap_const_logic_1;
        else 
            xf_cv_icvSaturate8u_cv_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1350_1_fu_371_p2 <= (sub_ln1351_3_fu_365_p2 xor ap_const_lv9_100);
    xor_ln1350_fu_309_p2 <= (sub_ln1351_2_fu_303_p2 xor ap_const_lv9_100);
    xor_ln151_1_fu_544_p2 <= (vg_reg_776 xor ap_const_lv1_1);
    xor_ln151_fu_522_p2 <= (vr_reg_770 xor ap_const_lv1_1);
    zext_ln119_1_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_1_fu_324_p2),10));
    zext_ln119_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_fu_254_p1),9));
    zext_ln1351_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_i_reg_695),9));
    zext_ln141_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_cv_icvSaturate8u_cv_q3),9));
    zext_ln142_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_cv_icvSaturate8u_cv_q1),10));
    zext_ln150_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_2_fu_386_p2),64));
    zext_ln151_1_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln151_1_fu_469_p3),12));
    zext_ln151_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_443_p3),11));
    zext_ln215_1_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_i_reg_695),10));
    zext_ln215_2_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln696_fu_353_p2),9));
    zext_ln215_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_i_fu_258_p4),9));
    zext_ln538_1_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1350_fu_309_p2),64));
    zext_ln538_2_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1350_1_fu_371_p2),64));
    zext_ln538_3_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln216_1_fu_406_p2),64));
    zext_ln538_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1350_fu_292_p2),64));
    zext_ln874_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_i_reg_690_pp0_iter2_reg),10));
end behav;
