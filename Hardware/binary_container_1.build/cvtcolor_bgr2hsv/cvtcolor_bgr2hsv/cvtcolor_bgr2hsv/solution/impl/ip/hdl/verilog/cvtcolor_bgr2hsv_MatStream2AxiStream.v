// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cvtcolor_bgr2hsv_MatStream2AxiStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        imgOutput0_414_dout,
        imgOutput0_414_empty_n,
        imgOutput0_414_read,
        ldata1_din,
        ldata1_full_n,
        ldata1_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_bound_per_npc_dout,
        cols_bound_per_npc_empty_n,
        cols_bound_per_npc_read,
        last_blk_width
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] imgOutput0_414_dout;
input   imgOutput0_414_empty_n;
output   imgOutput0_414_read;
output  [511:0] ldata1_din;
input   ldata1_full_n;
output   ldata1_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_bound_per_npc_dout;
input   cols_bound_per_npc_empty_n;
output   cols_bound_per_npc_read;
input  [3:0] last_blk_width;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgOutput0_414_read;
reg[511:0] ldata1_din;
reg ldata1_write;
reg rows_read;
reg cols_bound_per_npc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    imgOutput0_414_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1241_reg_412;
reg    ldata1_blk_n;
reg   [0:0] icmp_ln882_reg_421;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln878_fu_371_p2;
reg    rows_blk_n;
reg    cols_bound_per_npc_blk_n;
reg   [63:0] indvar_flatten_reg_117;
reg   [30:0] j_reg_128;
reg   [9:0] empty_reg_139;
reg   [31:0] rows_1_reg_385;
reg    ap_block_state1;
reg   [31:0] cols_bound_per_npc_1_reg_390;
reg   [3:0] last_blk_width_read_reg_397;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_i_fu_169_p2;
reg   [31:0] sub_i_reg_402;
wire   [63:0] mul_ln1231_fu_180_p2;
reg   [63:0] mul_ln1231_reg_407;
wire   [0:0] icmp_ln1241_fu_195_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op57_write_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln1241_fu_200_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln882_fu_245_p2;
wire   [9:0] add_ln216_fu_260_p2;
reg   [9:0] add_ln216_reg_425;
wire   [30:0] j_1_fu_272_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [9:0] ap_phi_mux_empty_phi_fu_143_p4;
reg   [9:0] ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_154_p4;
wire   [9:0] or_ln_fu_251_p3;
wire   [9:0] ap_phi_reg_pp0_iter0_conv_i9_i_i4_pn_i_reg_151;
wire   [9:0] zext_ln1253_fu_234_p1;
reg   [511:0] p_0_fu_82;
wire   [511:0] select_ln791_fu_353_p3;
wire   [511:0] or_ln1353_fu_294_p2;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state5;
wire   [31:0] mul_ln1231_fu_180_p0;
wire   [31:0] mul_ln1231_fu_180_p1;
wire   [31:0] zext_ln1246_fu_186_p1;
wire   [0:0] icmp_ln1246_fu_190_p2;
wire   [30:0] select_ln1238_fu_206_p3;
wire   [31:0] zext_ln1239_fu_214_p1;
wire   [0:0] bLast_fu_218_p2;
wire   [3:0] xf_bits_per_clock_fu_223_p3;
wire  signed [4:0] sext_ln1253_fu_230_p1;
wire   [9:0] sub_ln1258_fu_239_p2;
wire   [30:0] add_ln1246_fu_266_p2;
wire   [511:0] zext_ln211_fu_280_p1;
wire   [511:0] zext_ln785_fu_284_p1;
wire   [511:0] shl_ln785_fu_288_p2;
wire   [10:0] zext_ln1351_fu_301_p1;
wire   [10:0] p_Val2_s_fu_305_p2;
wire   [8:0] trunc_ln793_fu_323_p1;
wire   [8:0] sub_ln550_fu_327_p2;
wire   [511:0] zext_ln785_1_fu_333_p1;
wire   [9:0] trunc_ln455_fu_319_p1;
wire   [511:0] zext_ln803_fu_343_p1;
wire   [0:0] p_Result_s_fu_311_p3;
wire   [511:0] shl_ln785_1_fu_337_p2;
wire   [511:0] lshr_ln803_fu_347_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] mul_ln1231_fu_180_p00;
wire   [63:0] mul_ln1231_fu_180_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

cvtcolor_bgr2hsv_mul_32ns_32ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_1_1_U101(
    .din0(mul_ln1231_fu_180_p0),
    .din1(mul_ln1231_fu_180_p1),
    .dout(mul_ln1231_fu_180_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln878_fu_371_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1241_reg_412 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_139 <= add_ln216_reg_425;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_139 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1241_fu_195_p2 == 1'd0))) begin
        indvar_flatten_reg_117 <= add_ln1241_fu_200_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_117 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1241_fu_195_p2 == 1'd0))) begin
        j_reg_128 <= j_1_fu_272_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_reg_128 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln882_reg_421 == 1'd1) & (icmp_ln1241_reg_412 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_fu_82 <= or_ln1353_fu_294_p2;
    end else if (((icmp_ln882_reg_421 == 1'd0) & (icmp_ln1241_reg_412 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_fu_82 <= select_ln791_fu_353_p3;
    end else if ((~((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_fu_82 <= 512'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1241_fu_195_p2 == 1'd0))) begin
        add_ln216_reg_425 <= add_ln216_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_1_reg_390 <= cols_bound_per_npc_dout;
        rows_1_reg_385 <= rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1241_reg_412 <= icmp_ln1241_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1241_fu_195_p2 == 1'd0))) begin
        icmp_ln882_reg_421 <= icmp_ln882_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        last_blk_width_read_reg_397 <= last_blk_width;
        mul_ln1231_reg_407 <= mul_ln1231_fu_180_p2;
        sub_i_reg_402 <= sub_i_fu_169_p2;
    end
end

always @ (*) begin
    if ((icmp_ln1241_fu_195_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_fu_371_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1241_fu_195_p2 == 1'd0)) begin
        if ((icmp_ln882_fu_245_p2 == 1'd1)) begin
            ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_154_p4 = zext_ln1253_fu_234_p1;
        end else if ((icmp_ln882_fu_245_p2 == 1'd0)) begin
            ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_154_p4 = or_ln_fu_251_p3;
        end else begin
            ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_154_p4 = ap_phi_reg_pp0_iter0_conv_i9_i_i4_pn_i_reg_151;
        end
    end else begin
        ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_154_p4 = ap_phi_reg_pp0_iter0_conv_i9_i_i4_pn_i_reg_151;
    end
end

always @ (*) begin
    if (((icmp_ln1241_reg_412 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_empty_phi_fu_143_p4 = add_ln216_reg_425;
    end else begin
        ap_phi_mux_empty_phi_fu_143_p4 = empty_reg_139;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_fu_371_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_blk_n = cols_bound_per_npc_empty_n;
    end else begin
        cols_bound_per_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_read = 1'b1;
    end else begin
        cols_bound_per_npc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1241_reg_412 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgOutput0_414_blk_n = imgOutput0_414_empty_n;
    end else begin
        imgOutput0_414_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1241_reg_412 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgOutput0_414_read = 1'b1;
    end else begin
        imgOutput0_414_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln878_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln882_reg_421 == 1'd0) & (icmp_ln1241_reg_412 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ldata1_blk_n = ldata1_full_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln878_fu_371_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (icmp_ln878_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ldata1_din = p_0_fu_82;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op57_write_state4 == 1'b1))) begin
        ldata1_din = or_ln1353_fu_294_p2;
    end else begin
        ldata1_din = 'bx;
    end
end

always @ (*) begin
    if (((~((icmp_ln878_fu_371_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (icmp_ln878_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op57_write_state4 == 1'b1)))) begin
        ldata1_write = 1'b1;
    end else begin
        ldata1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1241_fu_195_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1241_fu_195_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((icmp_ln878_fu_371_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1241_fu_200_p2 = (indvar_flatten_reg_117 + 64'd1);

assign add_ln1246_fu_266_p2 = (j_reg_128 + 31'd1);

assign add_ln216_fu_260_p2 = (ap_phi_mux_conv_i9_i_i4_pn_i_phi_fu_154_p4 + ap_phi_mux_empty_phi_fu_143_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln1241_reg_412 == 1'd0) & (imgOutput0_414_empty_n == 1'b0)) | ((ldata1_full_n == 1'b0) & (ap_predicate_op57_write_state4 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln1241_reg_412 == 1'd0) & (imgOutput0_414_empty_n == 1'b0)) | ((ldata1_full_n == 1'b0) & (ap_predicate_op57_write_state4 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln1241_reg_412 == 1'd0) & (imgOutput0_414_empty_n == 1'b0)) | ((ldata1_full_n == 1'b0) & (ap_predicate_op57_write_state4 == 1'b1))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln1241_reg_412 == 1'd0) & (imgOutput0_414_empty_n == 1'b0)) | ((ldata1_full_n == 1'b0) & (ap_predicate_op57_write_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state5 = ((icmp_ln878_fu_371_p2 == 1'd0) & (ldata1_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_conv_i9_i_i4_pn_i_reg_151 = 'bx;

always @ (*) begin
    ap_predicate_op57_write_state4 = ((icmp_ln882_reg_421 == 1'd0) & (icmp_ln1241_reg_412 == 1'd0));
end

assign bLast_fu_218_p2 = ((zext_ln1239_fu_214_p1 == sub_i_reg_402) ? 1'b1 : 1'b0);

assign icmp_ln1241_fu_195_p2 = ((indvar_flatten_reg_117 == mul_ln1231_reg_407) ? 1'b1 : 1'b0);

assign icmp_ln1246_fu_190_p2 = (($signed(zext_ln1246_fu_186_p1) < $signed(cols_bound_per_npc_1_reg_390)) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_371_p2 = ((empty_reg_139 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln882_fu_245_p2 = ((ap_phi_mux_empty_phi_fu_143_p4 < sub_ln1258_fu_239_p2) ? 1'b1 : 1'b0);

assign j_1_fu_272_p3 = ((icmp_ln1246_fu_190_p2[0:0] === 1'b1) ? add_ln1246_fu_266_p2 : 31'd1);

assign lshr_ln803_fu_347_p2 = zext_ln211_fu_280_p1 >> zext_ln803_fu_343_p1;

assign mul_ln1231_fu_180_p0 = mul_ln1231_fu_180_p00;

assign mul_ln1231_fu_180_p00 = cols_bound_per_npc_1_reg_390;

assign mul_ln1231_fu_180_p1 = mul_ln1231_fu_180_p10;

assign mul_ln1231_fu_180_p10 = rows_1_reg_385;

assign or_ln1353_fu_294_p2 = (shl_ln785_fu_288_p2 | p_0_fu_82);

assign or_ln_fu_251_p3 = {{5'd16}, {sext_ln1253_fu_230_p1}};

assign p_Result_s_fu_311_p3 = p_Val2_s_fu_305_p2[32'd10];

assign p_Val2_s_fu_305_p2 = (11'd512 - zext_ln1351_fu_301_p1);

assign select_ln1238_fu_206_p3 = ((icmp_ln1246_fu_190_p2[0:0] === 1'b1) ? j_reg_128 : 31'd0);

assign select_ln791_fu_353_p3 = ((p_Result_s_fu_311_p3[0:0] === 1'b1) ? shl_ln785_1_fu_337_p2 : lshr_ln803_fu_347_p2);

assign sext_ln1253_fu_230_p1 = $signed(xf_bits_per_clock_fu_223_p3);

assign shl_ln785_1_fu_337_p2 = zext_ln211_fu_280_p1 << zext_ln785_1_fu_333_p1;

assign shl_ln785_fu_288_p2 = zext_ln211_fu_280_p1 << zext_ln785_fu_284_p1;

assign sub_i_fu_169_p2 = ($signed(cols_bound_per_npc_1_reg_390) + $signed(32'd4294967295));

assign sub_ln1258_fu_239_p2 = ($signed(10'd512) - $signed(zext_ln1253_fu_234_p1));

assign sub_ln550_fu_327_p2 = (9'd0 - trunc_ln793_fu_323_p1);

assign trunc_ln455_fu_319_p1 = p_Val2_s_fu_305_p2[9:0];

assign trunc_ln793_fu_323_p1 = p_Val2_s_fu_305_p2[8:0];

assign xf_bits_per_clock_fu_223_p3 = ((bLast_fu_218_p2[0:0] === 1'b1) ? last_blk_width_read_reg_397 : 4'd8);

assign zext_ln1239_fu_214_p1 = select_ln1238_fu_206_p3;

assign zext_ln1246_fu_186_p1 = j_reg_128;

assign zext_ln1253_fu_234_p1 = $unsigned(sext_ln1253_fu_230_p1);

assign zext_ln1351_fu_301_p1 = empty_reg_139;

assign zext_ln211_fu_280_p1 = imgOutput0_414_dout;

assign zext_ln785_1_fu_333_p1 = sub_ln550_fu_327_p2;

assign zext_ln785_fu_284_p1 = empty_reg_139;

assign zext_ln803_fu_343_p1 = trunc_ln455_fu_319_p1;

endmodule //cvtcolor_bgr2hsv_MatStream2AxiStream
