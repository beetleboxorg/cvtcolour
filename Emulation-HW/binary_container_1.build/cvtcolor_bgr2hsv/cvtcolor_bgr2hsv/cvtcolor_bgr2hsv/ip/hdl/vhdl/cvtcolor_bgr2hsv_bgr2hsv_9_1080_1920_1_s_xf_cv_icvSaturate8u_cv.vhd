-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_xf_cv_icvSaturate8u_cv_rom is 
    generic(
             DWIDTH     : integer := 8; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 769
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          addr2      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce2       : in std_logic; 
          q2         : out std_logic_vector(DWIDTH-1 downto 0);
          addr3      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce3       : in std_logic; 
          q3         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_xf_cv_icvSaturate8u_cv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr2_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr3_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem0 : mem_array := (
    0 to 256=> "00000000", 257 => "00000001", 258 => "00000010", 259 => "00000011", 
    260 => "00000100", 261 => "00000101", 262 => "00000110", 263 => "00000111", 
    264 => "00001000", 265 => "00001001", 266 => "00001010", 267 => "00001011", 
    268 => "00001100", 269 => "00001101", 270 => "00001110", 271 => "00001111", 
    272 => "00010000", 273 => "00010001", 274 => "00010010", 275 => "00010011", 
    276 => "00010100", 277 => "00010101", 278 => "00010110", 279 => "00010111", 
    280 => "00011000", 281 => "00011001", 282 => "00011010", 283 => "00011011", 
    284 => "00011100", 285 => "00011101", 286 => "00011110", 287 => "00011111", 
    288 => "00100000", 289 => "00100001", 290 => "00100010", 291 => "00100011", 
    292 => "00100100", 293 => "00100101", 294 => "00100110", 295 => "00100111", 
    296 => "00101000", 297 => "00101001", 298 => "00101010", 299 => "00101011", 
    300 => "00101100", 301 => "00101101", 302 => "00101110", 303 => "00101111", 
    304 => "00110000", 305 => "00110001", 306 => "00110010", 307 => "00110011", 
    308 => "00110100", 309 => "00110101", 310 => "00110110", 311 => "00110111", 
    312 => "00111000", 313 => "00111001", 314 => "00111010", 315 => "00111011", 
    316 => "00111100", 317 => "00111101", 318 => "00111110", 319 => "00111111", 
    320 => "01000000", 321 => "01000001", 322 => "01000010", 323 => "01000011", 
    324 => "01000100", 325 => "01000101", 326 => "01000110", 327 => "01000111", 
    328 => "01001000", 329 => "01001001", 330 => "01001010", 331 => "01001011", 
    332 => "01001100", 333 => "01001101", 334 => "01001110", 335 => "01001111", 
    336 => "01010000", 337 => "01010001", 338 => "01010010", 339 => "01010011", 
    340 => "01010100", 341 => "01010101", 342 => "01010110", 343 => "01010111", 
    344 => "01011000", 345 => "01011001", 346 => "01011010", 347 => "01011011", 
    348 => "01011100", 349 => "01011101", 350 => "01011110", 351 => "01011111", 
    352 => "01100000", 353 => "01100001", 354 => "01100010", 355 => "01100011", 
    356 => "01100100", 357 => "01100101", 358 => "01100110", 359 => "01100111", 
    360 => "01101000", 361 => "01101001", 362 => "01101010", 363 => "01101011", 
    364 => "01101100", 365 => "01101101", 366 => "01101110", 367 => "01101111", 
    368 => "01110000", 369 => "01110001", 370 => "01110010", 371 => "01110011", 
    372 => "01110100", 373 => "01110101", 374 => "01110110", 375 => "01110111", 
    376 => "01111000", 377 => "01111001", 378 => "01111010", 379 => "01111011", 
    380 => "01111100", 381 => "01111101", 382 => "01111110", 383 => "01111111", 
    384 => "10000000", 385 => "10000001", 386 => "10000010", 387 => "10000011", 
    388 => "10000100", 389 => "10000101", 390 => "10000110", 391 => "10000111", 
    392 => "10001000", 393 => "10001001", 394 => "10001010", 395 => "10001011", 
    396 => "10001100", 397 => "10001101", 398 => "10001110", 399 => "10001111", 
    400 => "10010000", 401 => "10010001", 402 => "10010010", 403 => "10010011", 
    404 => "10010100", 405 => "10010101", 406 => "10010110", 407 => "10010111", 
    408 => "10011000", 409 => "10011001", 410 => "10011010", 411 => "10011011", 
    412 => "10011100", 413 => "10011101", 414 => "10011110", 415 => "10011111", 
    416 => "10100000", 417 => "10100001", 418 => "10100010", 419 => "10100011", 
    420 => "10100100", 421 => "10100101", 422 => "10100110", 423 => "10100111", 
    424 => "10101000", 425 => "10101001", 426 => "10101010", 427 => "10101011", 
    428 => "10101100", 429 => "10101101", 430 => "10101110", 431 => "10101111", 
    432 => "10110000", 433 => "10110001", 434 => "10110010", 435 => "10110011", 
    436 => "10110100", 437 => "10110101", 438 => "10110110", 439 => "10110111", 
    440 => "10111000", 441 => "10111001", 442 => "10111010", 443 => "10111011", 
    444 => "10111100", 445 => "10111101", 446 => "10111110", 447 => "10111111", 
    448 => "11000000", 449 => "11000001", 450 => "11000010", 451 => "11000011", 
    452 => "11000100", 453 => "11000101", 454 => "11000110", 455 => "11000111", 
    456 => "11001000", 457 => "11001001", 458 => "11001010", 459 => "11001011", 
    460 => "11001100", 461 => "11001101", 462 => "11001110", 463 => "11001111", 
    464 => "11010000", 465 => "11010001", 466 => "11010010", 467 => "11010011", 
    468 => "11010100", 469 => "11010101", 470 => "11010110", 471 => "11010111", 
    472 => "11011000", 473 => "11011001", 474 => "11011010", 475 => "11011011", 
    476 => "11011100", 477 => "11011101", 478 => "11011110", 479 => "11011111", 
    480 => "11100000", 481 => "11100001", 482 => "11100010", 483 => "11100011", 
    484 => "11100100", 485 => "11100101", 486 => "11100110", 487 => "11100111", 
    488 => "11101000", 489 => "11101001", 490 => "11101010", 491 => "11101011", 
    492 => "11101100", 493 => "11101101", 494 => "11101110", 495 => "11101111", 
    496 => "11110000", 497 => "11110001", 498 => "11110010", 499 => "11110011", 
    500 => "11110100", 501 => "11110101", 502 => "11110110", 503 => "11110111", 
    504 => "11111000", 505 => "11111001", 506 => "11111010", 507 => "11111011", 
    508 => "11111100", 509 => "11111101", 510 => "11111110", 511 to 768=> "11111111" );
signal mem1 : mem_array := (
    0 to 256=> "00000000", 257 => "00000001", 258 => "00000010", 259 => "00000011", 
    260 => "00000100", 261 => "00000101", 262 => "00000110", 263 => "00000111", 
    264 => "00001000", 265 => "00001001", 266 => "00001010", 267 => "00001011", 
    268 => "00001100", 269 => "00001101", 270 => "00001110", 271 => "00001111", 
    272 => "00010000", 273 => "00010001", 274 => "00010010", 275 => "00010011", 
    276 => "00010100", 277 => "00010101", 278 => "00010110", 279 => "00010111", 
    280 => "00011000", 281 => "00011001", 282 => "00011010", 283 => "00011011", 
    284 => "00011100", 285 => "00011101", 286 => "00011110", 287 => "00011111", 
    288 => "00100000", 289 => "00100001", 290 => "00100010", 291 => "00100011", 
    292 => "00100100", 293 => "00100101", 294 => "00100110", 295 => "00100111", 
    296 => "00101000", 297 => "00101001", 298 => "00101010", 299 => "00101011", 
    300 => "00101100", 301 => "00101101", 302 => "00101110", 303 => "00101111", 
    304 => "00110000", 305 => "00110001", 306 => "00110010", 307 => "00110011", 
    308 => "00110100", 309 => "00110101", 310 => "00110110", 311 => "00110111", 
    312 => "00111000", 313 => "00111001", 314 => "00111010", 315 => "00111011", 
    316 => "00111100", 317 => "00111101", 318 => "00111110", 319 => "00111111", 
    320 => "01000000", 321 => "01000001", 322 => "01000010", 323 => "01000011", 
    324 => "01000100", 325 => "01000101", 326 => "01000110", 327 => "01000111", 
    328 => "01001000", 329 => "01001001", 330 => "01001010", 331 => "01001011", 
    332 => "01001100", 333 => "01001101", 334 => "01001110", 335 => "01001111", 
    336 => "01010000", 337 => "01010001", 338 => "01010010", 339 => "01010011", 
    340 => "01010100", 341 => "01010101", 342 => "01010110", 343 => "01010111", 
    344 => "01011000", 345 => "01011001", 346 => "01011010", 347 => "01011011", 
    348 => "01011100", 349 => "01011101", 350 => "01011110", 351 => "01011111", 
    352 => "01100000", 353 => "01100001", 354 => "01100010", 355 => "01100011", 
    356 => "01100100", 357 => "01100101", 358 => "01100110", 359 => "01100111", 
    360 => "01101000", 361 => "01101001", 362 => "01101010", 363 => "01101011", 
    364 => "01101100", 365 => "01101101", 366 => "01101110", 367 => "01101111", 
    368 => "01110000", 369 => "01110001", 370 => "01110010", 371 => "01110011", 
    372 => "01110100", 373 => "01110101", 374 => "01110110", 375 => "01110111", 
    376 => "01111000", 377 => "01111001", 378 => "01111010", 379 => "01111011", 
    380 => "01111100", 381 => "01111101", 382 => "01111110", 383 => "01111111", 
    384 => "10000000", 385 => "10000001", 386 => "10000010", 387 => "10000011", 
    388 => "10000100", 389 => "10000101", 390 => "10000110", 391 => "10000111", 
    392 => "10001000", 393 => "10001001", 394 => "10001010", 395 => "10001011", 
    396 => "10001100", 397 => "10001101", 398 => "10001110", 399 => "10001111", 
    400 => "10010000", 401 => "10010001", 402 => "10010010", 403 => "10010011", 
    404 => "10010100", 405 => "10010101", 406 => "10010110", 407 => "10010111", 
    408 => "10011000", 409 => "10011001", 410 => "10011010", 411 => "10011011", 
    412 => "10011100", 413 => "10011101", 414 => "10011110", 415 => "10011111", 
    416 => "10100000", 417 => "10100001", 418 => "10100010", 419 => "10100011", 
    420 => "10100100", 421 => "10100101", 422 => "10100110", 423 => "10100111", 
    424 => "10101000", 425 => "10101001", 426 => "10101010", 427 => "10101011", 
    428 => "10101100", 429 => "10101101", 430 => "10101110", 431 => "10101111", 
    432 => "10110000", 433 => "10110001", 434 => "10110010", 435 => "10110011", 
    436 => "10110100", 437 => "10110101", 438 => "10110110", 439 => "10110111", 
    440 => "10111000", 441 => "10111001", 442 => "10111010", 443 => "10111011", 
    444 => "10111100", 445 => "10111101", 446 => "10111110", 447 => "10111111", 
    448 => "11000000", 449 => "11000001", 450 => "11000010", 451 => "11000011", 
    452 => "11000100", 453 => "11000101", 454 => "11000110", 455 => "11000111", 
    456 => "11001000", 457 => "11001001", 458 => "11001010", 459 => "11001011", 
    460 => "11001100", 461 => "11001101", 462 => "11001110", 463 => "11001111", 
    464 => "11010000", 465 => "11010001", 466 => "11010010", 467 => "11010011", 
    468 => "11010100", 469 => "11010101", 470 => "11010110", 471 => "11010111", 
    472 => "11011000", 473 => "11011001", 474 => "11011010", 475 => "11011011", 
    476 => "11011100", 477 => "11011101", 478 => "11011110", 479 => "11011111", 
    480 => "11100000", 481 => "11100001", 482 => "11100010", 483 => "11100011", 
    484 => "11100100", 485 => "11100101", 486 => "11100110", 487 => "11100111", 
    488 => "11101000", 489 => "11101001", 490 => "11101010", 491 => "11101011", 
    492 => "11101100", 493 => "11101101", 494 => "11101110", 495 => "11101111", 
    496 => "11110000", 497 => "11110001", 498 => "11110010", 499 => "11110011", 
    500 => "11110100", 501 => "11110101", 502 => "11110110", 503 => "11110111", 
    504 => "11111000", 505 => "11111001", 506 => "11111010", 507 => "11111011", 
    508 => "11111100", 509 => "11111101", 510 => "11111110", 511 to 768=> "11111111" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem0 : signal is "block_rom";
attribute syn_rom_style of mem1 : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem0 : signal is "block";
attribute ROM_STYLE of mem1 : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

memory_access_guard_2: process (addr2) 
begin
      addr2_tmp <= addr2;
--synthesis translate_off
      if (CONV_INTEGER(addr2) > mem_size-1) then
           addr2_tmp <= (others => '0');
      else 
           addr2_tmp <= addr2;
      end if;
--synthesis translate_on
end process;

memory_access_guard_3: process (addr3) 
begin
      addr3_tmp <= addr3;
--synthesis translate_off
      if (CONV_INTEGER(addr3) > mem_size-1) then
           addr3_tmp <= (others => '0');
      else 
           addr3_tmp <= addr3;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem0(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem0(CONV_INTEGER(addr1_tmp)); 
        end if;
        if (ce2 = '1') then 
            q2 <= mem1(CONV_INTEGER(addr2_tmp)); 
        end if;
        if (ce3 = '1') then 
            q3 <= mem1(CONV_INTEGER(addr3_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_xf_cv_icvSaturate8u_cv is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 769;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address2 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address3 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_xf_cv_icvSaturate8u_cv is
    component cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_xf_cv_icvSaturate8u_cv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR;
            addr2 : IN STD_LOGIC_VECTOR;
            ce2 : IN STD_LOGIC;
            q2 : OUT STD_LOGIC_VECTOR;
            addr3 : IN STD_LOGIC_VECTOR;
            ce3 : IN STD_LOGIC;
            q3 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_xf_cv_icvSaturate8u_cv_rom_U :  component cvtcolor_bgr2hsv_bgr2hsv_9_1080_1920_1_s_xf_cv_icvSaturate8u_cv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1,
        addr2 => address2,
        ce2 => ce2,
        q2 => q2,
        addr3 => address3,
        ce3 => ce3,
        q3 => q3);

end architecture;


